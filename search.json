[{"title":"springmvc基础（1）","date":"2021-03-15T14:54:17.311Z","url":"/2021/03/15/springmvc-1/","categories":[["springmvc","/categories/springmvc/"]],"content":"SpringMvc介绍 使用@Controller创建控制器对象 SpringMvc中有一个对象是Servlet DispatcherServlet：负责接收用户所有请求，把请求转发给Controller对象 Controller用来处理请求 创建SpringMvc项目 在Maven中勾上Create from archetype（从原型创建） 选择org.apache.maven.archetype:maven-archetype-webapp pom.xml中加入依赖 将web.xml更替为4.0版本 创建DispatcherServlet DispatcherServlet介绍 Tomcat服务器启动后，会创建DispatcherServlet对象的实例 在创建DispatcherServlet对象的实例时，会springmvc容器对象，所以会读取dispatcherServlet.xml load-on-startup标签数值（&gt;=0的整数）越小表示tomcat创建对象的时间越早 init-param标签用来自定义springmvc配置文件的位置，若不写，则路径是/WEB-INF/&lt; servlet-name &gt;-servlet.xml url-pattern标签用来指定要处理的请求 在index.jsp页面中发起请求 创建Controller类 创建result.jsp读取modelAndView的massage参数 创建dispatcherServlet.xml 配置视图解析器 在WEB-INF创建view文件夹 把result.jsp放入view文件夹 WEB-INF不允许客户端直接访问 在dispatcherServlet.xml中配置视图解析器 在Controller类中指定视图 RequestMapping的定义请求规则 多个请求可以映射到同一个方法 可以加入前缀路径来统一管理 可以直接放到类上面当模块名称 也可以单独在方法上指定 指定后要修改请求 指定请求的接收方式 指定为POST时只能接收POST方式的请求 指定后要修改请求方式 接收请求的参数 request、response、session 逐个接收 创建请求表单 创建接收请求方法 解决POST乱码问题 在web.xml中加入过滤器 "},{"title":"mybatis介绍","date":"2021-02-15T08:21:02.711Z","url":"/2021/02/15/mybatis-introduction/","categories":[["mybatis","/categories/mybatis/"]],"content":"使用原因 半自动 sql语句交由开发人员 其他环境由框架自动实现 比Hiberante学习成本低 Hiberante是全自动全映射 想要实现sql语句优化需要掌握hql 低耦合 框架是自动实现，不用大动干戈改代码 初次查询 引入的文件 mybatis-3.5.6.jar log4j-1.2.17.jar mysql-connector-java-8.0.13.jar log4j.xml 创建mybatis-config.xml 创建User类 创建UserMapper.xml 测试 接口式编程 创建UserMapper接口 创建对应UserMapper.xml 测试 "},{"title":"事务管理","date":"2021-02-07T12:33:23.042Z","url":"/2021/02/07/spring5-tx/","categories":[["Spring","/categories/Spring/"]],"content":"事务的概念 事务是数据库操作最基本单元，逻辑上的一组操作，要么都成功，如果有一个失败，则所有操作都回滚 事务四个特性ACID 原子性 一致性 隔离性 持久性 事务操作环境模拟 配置数据库连接池 配置JdbcTemplate对象 创建UserDaoImpl类 创建UserService类 此过程模拟的是用户之间的转账 事务管理操作介绍 两种方式 声明式事务管理 基于注解 基于配置 编程式事务管理 声明式事务管理的底层是AOP原理 基于注解的声明式事务管理 创建事务管理器 引入命名空间 开启事务注解 为UserService类添加事务注解 测试 声明式事务管理参数配置 propagation：事务传播行为 REQUIRED REQUIRED_NEW SUPPORTS MANDATORY NOT_SUPPORTS NEVER NESTED ioslation：事务隔离级别 Read_Uncommitted Read_Committed Repeatable_Read Serializable timeout：超时时间 -1（默认不超时） 其他一秒为单位的数字 readIOnly：是否只读 rollbackFor：回滚 noRollbackFor：不回滚 示例 基于配置的声明式事务管理 创建事务管理器 配置通知 配置切入点和切面 声明式事务管理的完全注解 创建配置类 测试 "},{"title":"JdbcTemplate的使用","date":"2021-02-07T08:51:36.533Z","url":"/2021/02/07/spring5-jdbctemplate/","categories":[["Spring","/categories/Spring/"]],"content":"JdbcTemplate的介绍 Spring框架对JDBC的封装 需要引入相关jar包 mysql-connector jdbc orm tx druid JdbcTemplate的配置 bean.xml中配置数据库连接池 bean.xml中配置JdbcTemplate对象 JdbcTemplate的使用 bean.xml 创建UserDao接口 创建UserDaoImpl实现类 创建UserService类 JdbcTemplate操作数据库 创建User实体类 增加 创建UserDao接口 创建UserDaoImpl实现类 创建UserService类 测试 修改 UserService类和UserDao类的创建与上述类似 创建UserDaoImpl实现类 测试 删除 UserService类和UserDao类的创建与上述类似 创建UserDaoImpl实现类 测试 查询值 UserService类和UserDao类的创建与上述类似 创建UserDaoImpl实现类 测试 查询对象 UserService类和UserDao类的创建与上述类似 创建UserDaoImpl实现类 测试 查询集合 UserService类和UserDao类的创建与上述类似 创建UserDaoImpl实现类 测试 批量增加 UserService类和UserDao类的创建与上述类似 创建UserDaoImpl实现类 测试 批量修改 UserService类和UserDao类的创建与上述类似 创建UserDaoImpl实现类 测试 批量删除 UserService类和UserDao类的创建与上述类似 创建UserDaoImpl实现类 测试 "},{"title":"Aop的使用","date":"2021-02-04T07:43:09.467Z","url":"/2021/02/04/spring5-aop/","categories":[["Spring","/categories/Spring/"]],"content":"AOP基本概念 面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。 不修改源代码的方式，为功能添加新功能。 AOP底层原理 有接口时，使用JDK动态代理，创建接口实现类代理对象 无接口时，使用CGLIB动态代理，创建子类的代理对象 JDK动态代理 创建接口类 实现接口类 创建代理对象 AOP术语 连接点：可以被增强的类的方法 切入点：实际被增强的类的方法 通知：实际被增强的类的方法的逻辑部分 前置通知：在执行前添加 后置通知：在执行后添加 环绕通知：在执行前和后都添加 异常通知：异常时添加 最终通知：最终添加 切面：把通知应用到切入点的过程 AOP操作 使用AspectJ实现AOP AspectJ是独立框架，和Spring一起使用 · 引入下列jar包 cglib aopalliance aspects aspectjweaver 引入切点表达式 execution(* service.UserService.add(..)) execution(* service.UserService.*(..)) execution(* service.* .*(..)) 注解方式实现AOP实现过程 bean.xml 创建User类 创建UserProxy类 测试 优先级 使用Order可以设置代理类优先级 数值越小则优先级越高 配置方式实现AOP 创建User类 创建User类 bean.xml "},{"title":"Bean管理（3）","date":"2021-01-29T10:02:49.920Z","url":"/2021/01/29/spring5-bean3/","categories":[["Spring","/categories/Spring/"]],"content":"基于注解创建对象 Component Service Controller Repository 引入aop依赖包 引入context命名空间 开启组件扫描 创建UserService类 测试 基于注解注入属性Autowired：根据类型进行自动装配 创建UserDaoImpl类 创建UserService类 Qualifier：根据名称注入，和Autowired一起用 创建UserDaoImpl类 创建UserService类 Resource：根据类型和名称注入，不建议使用 创建UserDaoImpl类 创建UserService类 Value：注入普通类型 创建UserService类 完全注解开发 创建配置类SpringConfig 创建UserService类 测试 "},{"title":"Bean管理（2）","date":"2021-01-29T06:56:42.326Z","url":"/2021/01/29/spring5-bean2/","categories":[["Spring","/categories/Spring/"]],"content":"FactoryBean 定义的bean类型和返回类型不一样 bean.xml 创建Musics类 测试 Bean作用域 singleton：单实例 prototype：多实例 bean.xml 测试 Bean生命周期 构造器创建实例 设置属性和引用其他bean 把实例传递 bean 后置处理器的方法 postProcessBeforeInitialization 调用初始化方法 把实例传递 bean 后置处理器的方法 postProcessAfterInitialization 对象获取 销毁实例 创建后置处理器类 bean.xml 测试 XML自动装配 byName：根据名字自动装配 byType：根据类型自动装配 bean.xml 创建student类 外部属性文件直接配置数据库信息 引入Druid连接池依赖jar包 配置Druid连接池 引入外部属性文件配置数据库连接池 创建properties文件 引入context空间名：xmlns:context=”; xsi:schemaLocation=” ; bean.xml "},{"title":"Bean管理（1）","date":"2021-01-26T12:14:22.871Z","url":"/2021/01/26/spring5-bean1/","categories":[["Spring","/categories/Spring/"]],"content":"基于XML配置文件创建对象 创建对象User 基于XML方式注入属性set方式注入 设置属性name的set方法 构造函数参数注入 设置带参数的构造函数 p名称空间注入 需要在beans里引入xmlns:p=”; 注入null值和特殊符号null值 property里不要写value 特殊符号 把特殊符号按照格式写进CDATA里 注入Bean属性外部注入 创建Service类和Dao类 内部注入 创建Music类和Type类 级联赋值不用get方法时 创建Music类和Type类 使用get方法时 创建Music类和Type类 Music类中的Type属性要生成对应的get方法 注入集合属性数组类型属性 创建Student类 List类型属性 创建Student类 Map类型属性 创建Student类 Set类型属性 创建Student类 注入Bean集合属性 创建Course类和Student类 共享list集合 创建Course类和Student类 在beans中引入xmlns:util=”; 以及xsi:schemaLocation=” ; "},{"title":"如何为vscode全局添加背景图片？","date":"2021-01-26T06:25:07.070Z","url":"/2021/01/26/vscodebackground/","categories":[["DIY","/categories/DIY/"]],"content":"本方法针对插件不生效的人，缺点是文字也会随透明度而改变。 打开css样式文件以下为参照路径 复制代码 粘贴代码粘贴代码到workbench.desktop.main.css文件中如图位置 注意事项1.图片的路径要使用双反斜杠2.如果是用记事本打开的workbench.desktop.main.css，会发现比图中的代码多出好多代码，请拉到文本最后添加。3.图中的WW是vs2019里的双反斜杠，请放心食用"},{"title":"如何为vs2019设置代码颜色搭配?","date":"2021-01-26T06:25:07.067Z","url":"/2021/01/26/vs2019font/","categories":[["DIY","/categories/DIY/"]],"content":"此方法也适用于其他版本的vs。 选择一款喜欢的颜色搭配设置颜色搭配主题网站下载后会得到一个后缀为vssettings的文件 设置下载的环境文件菜单栏-&gt;工具-&gt;导入和导出设置也可以用快捷键Alt+T+I打开选择选项-导入选定的环境设置会提示你要不要保存当前设置，这边建议保存比较好保存完选择-浏览，选择之前下载的后缀为vssettings的文件即可 注意事项1.因为这个是环境设置文件，所以可能会修改到其他设置，请使用前备份。2.这边推荐Sublime Text3的代码颜色。"},{"title":"如何为vs2019全局添加背景图片？","date":"2021-01-26T06:25:07.045Z","url":"/2021/01/26/vs2019background/","categories":[["DIY","/categories/DIY/"]],"content":"本方法比较实用，而且不会改变文字的透明度。 打开管理扩展菜单栏-&gt;扩展-&gt;管理扩展也可以直接通过快捷键Alt+X+M打开 安装插件找到右上角的搜索框搜索并安装以下两个插件 设置主题插件设置位置如下菜单栏-&gt;工具-&gt;Customize Colors菜单栏-&gt;工具-&gt;选项-&gt;ClaudiaIDE本人搭配的主题效果如下 设置全局透明效果下载下列主题DarkFullyTransparent在菜单栏-&gt;工具-&gt;Customize Colors-&gt;Import Theme导入该主题并安装在菜单栏-&gt;工具-&gt;选项-&gt;ClaudiaIDE下进行如图设置 注意事项1.按照本人的设置可以全局背景透明效果2.不一定要使用本人的主题也可以达到全局透明效果"}]